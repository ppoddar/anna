-- ========================================
--         Schema for ANNA database
-- ========================================
SET client_min_messages TO 'ERROR';

CREATE EXTENSION IF NOT EXISTS pgcrypto;

DROP TABLE IF EXISTS USERS  CASCADE;
DROP TABLE IF EXISTS ITEMS  CASCADE;
DROP TABLE IF EXISTS ORDERS CASCADE;
DROP TABLE IF EXISTS INVOICES CASCADE;
DROP TABLE IF EXISTS SESSIONS CASCADE;
DROP TABLE IF EXISTS USER_LOGINS;
DROP TABLE IF EXISTS ITEM_CATEGORIES;
DROP TABLE IF EXISTS ITEM_TAGS;
DROP TABLE IF EXISTS ORDER_ITEMS;
DROP TABLE IF EXISTS ORDER_EVENTS;
DROP TABLE IF EXISTS INVOICE_ITEMS;
DROP TABLE IF EXISTS PAYORDERS;
DROP TABLE IF EXISTS SEQUENCES;
DROP TABLE IF EXISTS PROFILES;
DROP TABLE IF EXISTS ACCOUNTS;
DROP TABLE IF EXISTS ADDRESSES;
DROP TABLE IF EXISTS EVENTS;
DROP TABLE IF EXISTS USER_ROLES;
DROP TABLE IF EXISTS USER_HOMEPAGES;
DROP TABLE IF EXISTS ROLES;
DROP TABLE IF EXISTS RATINGS;

-- ==================================================================

CREATE TABLE USERS (
	ID        VARCHAR PRIMARY KEY,
	NAME      VARCHAR,
	EMAIL     VARCHAR,
	PHONE     VARCHAR,
	PASSWORD  TEXT,
	IMAGE     VARCHAR
);



CREATE TABLE ROLES (
	NAME VARCHAR PRIMARY KEY,
	DESCRIPTION VARCHAR
);

CREATE TABLE USER_ROLES (
	USER_FK VARCHAR REFERENCES USERS(ID) ON DELETE CASCADE,
	ROLE_FK VARCHAR REFERENCES ROLES(NAME),
	PRIMARY KEY (USER_FK, ROLE_FK)
);

CREATE TABLE USER_LOGINS (
	ID        VARCHAR REFERENCES USERS(ID) ON DELETE CASCADE,
	"role"    VARCHAR REFERENCES ROLES(NAME) ON DELETE CASCADE,
	LOGIN_TIME TIMESTAMP,
	LOGOUT_TIME TIMESTAMP,

	PRIMARY KEY (ID)
);

-- each user can customize his/her landing page 
CREATE TABLE USER_HOMEPAGES (
	USER_FK VARCHAR REFERENCES USERS(ID) ON DELETE CASCADE,
	HOMEPAGE VARCHAR,
	PRIMARY KEY (USER_FK)
);

CREATE TABLE ADDRESSES (
	ID        SERIAL PRIMARY KEY,
	OWNER     VARCHAR REFERENCES USERS(ID) ON DELETE CASCADE,
	KIND      VARCHAR,
	LINE1     VARCHAR NOT NULL,
	LINE2     VARCHAR,
	CITY      VARCHAR NOT NULL,
	ZIP       VARCHAR NOT NULL,
	PHONE     VARCHAR,
	TIPS      VARCHAR,

	UNIQUE (OWNER, KIND)
);
-- ==================================================================

CREATE TABLE ORDERS (
	ID          SERIAL PRIMARY KEY,
	USER_ID     VARCHAR REFERENCES USERS(ID) ON DELETE CASCADE,
	CREATED_AT  TIMESTAMP,
	TIME_OFFSET BIGINT,
	STATUS      VARCHAR
);

CREATE TABLE ORDER_EVENTS (
	ID   SERIAL PRIMARY KEY,
	ORDER_FK INTEGER REFERENCES ORDERS(ID) ON DELETE CASCADE,
	WHAT VARCHAR,
	T    TIMESTAMP
);
-- ==================================================================

CREATE TABLE INVOICES (
	ID          INTEGER PRIMARY KEY REFERENCES ORDERS(ID) ON DELETE CASCADE,
	PAYORDER    VARCHAR, -- logical FK to PAYORDERS(ID)
	STATUS      VARCHAR,
	CREATED_AT     DATE,
	AMOUNT      NUMERIC(8,2),
	DELIVERY_ADDRESS INTEGER REFERENCES ADDRESSES(ID)
);

CREATE TABLE INVOICE_ITEMS (
	INVOICE_FK  INTEGER REFERENCES INVOICES (id) ON DELETE CASCADE,
	ID          VARCHAR, -- an id among this invoice
	KIND        VARCHAR,
	SKU         VARCHAR, -- an implicit foreign key to an item
	DESCRIPTION VARCHAR,
	AMOUNT      NUMERIC(8,2),
	PRIMARY KEY (INVOICE_FK, ID)
);

-- ==================================================================
CREATE TABLE ITEMS (
	SKU          VARCHAR PRIMARY KEY,
	NAME         VARCHAR NOT NULL UNIQUE,
	DESCRIPTION  VARCHAR,
	PRICE        NUMERIC(8,2) check (PRICE > 0),
	IMAGE        VARCHAR
);

CREATE TABLE ITEM_CATEGORIES (
	SKU          VARCHAR  REFERENCES ITEMS (sku) ON DELETE CASCADE,
	CATEGORY     VARCHAR NOT NULL
);

CREATE TABLE ITEM_TAGS (
	SKU          VARCHAR REFERENCES ITEMS (sku) ON DELETE CASCADE,
	TAG          VARCHAR NOT NULL
);


-- a order item refers to an order and an item.
-- a order item is identifed by compound foreign key  of order and item.
-- a order item has integral units
CREATE TABLE ORDER_ITEMS (
	ORDER_FK    INTEGER REFERENCES ORDERS (id) ON DELETE CASCADE,
	SKU     	VARCHAR REFERENCES ITEMS (sku) ON DELETE CASCADE,
	NAME        VARCHAR,
	UNITS       INT     check (UNITS > 0),
	COMMENT     VARCHAR, -- any additional comments. typically empty
	PRIMARY KEY (ORDER_FK, SKU)
);

CREATE TABLE PROFILES (
	OWNER VARCHAR REFERENCES USERS(ID)  ON DELETE CASCADE,
	"KEY" VARCHAR,
	VAL  VARCHAR
);



CREATE TABLE EVENTS (
	ID     VARCHAR PRIMARY KEY,
	TOPIC  VARCHAR NOT NULL,
	OCCURED  TIMESTAMP with TIME ZONE,
	BODY   JSON NOT NULL
);


CREATE TABLE PAYORDERS (
	ID VARCHAR PRIMARY KEY,
	INVOICE_FK INTEGER REFERENCES INVOICES(ID),
	AMOUNT NUMERIC(8,2),
	STATUS VARCHAR,
	CREATED_AT TIMESTAMP
);

CREATE TABLE RATINGS (
	WHO  VARCHAR REFERENCES USERS(ID)  ON DELETE CASCADE,
	WHAT VARCHAR REFERENCES ITEMS(SKU) ON DELETE CASCADE,
	CREATED_AT TIMESTAMP,
	RATING INT check (RATING > 0 AND RATING <= 5),
	COMMENT VARCHAR
);

CREATE TABLE SESSIONS (
	ID VARCHAR PRIMARY KEY,
	USER_FK VARCHAR UNIQUE NOT NULL REFERENCES USERS(ID) ,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);